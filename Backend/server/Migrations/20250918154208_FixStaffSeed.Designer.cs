// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250918154208_FixStaffSeed")]
    partial class FixStaffSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddOns")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cleaner")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Frequency")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AssignedName")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("BookingId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("JobsCompleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57202660-cfdc-415c-a1fa-18f3ecdc03a8"),
                            Email = "jane1@example.com",
                            JobsCompleted = 0,
                            Name = "Jane Doe",
                            PasswordHash = "$2a$11$elfeNqZ0OvqtfcpIppTm6.9xvfxufa6Lt/Ok/5LYJHpDZDDmFPtxK",
                            Phone = "555-1001",
                            Rating = 4.5,
                            Role = "staff",
                            Specialties = "",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("052c2e44-51f0-4d54-98a3-2b57f645b5ac"),
                            Email = "john1@example.com",
                            JobsCompleted = 0,
                            Name = "John Smith",
                            PasswordHash = "$2a$11$41XyyldLSS23DpPr/HpS9.FozyDOFhxtk8znzG1IkJxZqSnhe0xmW",
                            Phone = "555-1002",
                            Rating = 4.2000000000000002,
                            Role = "staff",
                            Specialties = "",
                            Status = "busy"
                        },
                        new
                        {
                            Id = new Guid("4e133d0a-6f35-4c95-893f-696a1a31df7a"),
                            Email = "alice1@example.com",
                            JobsCompleted = 0,
                            Name = "Alice Johnson",
                            PasswordHash = "$2a$11$C1jolhm5naOZdGLFpkEuI.F4eqUvZJtJQU.bB6cWvsEyUhMbdCbam",
                            Phone = "555-1003",
                            Rating = 4.7000000000000002,
                            Role = "staff",
                            Specialties = "",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("79cf5dc9-f8bc-45fe-b507-1422f6c8a3e8"),
                            Email = "bob1@example.com",
                            JobsCompleted = 0,
                            Name = "Bob Brown",
                            PasswordHash = "$2a$11$giHQR1.rsaPzh6grQ0p3jOc6Y/0TGRmI8UreuaCg/MQd3HCq5bSyG",
                            Phone = "555-1004",
                            Rating = 4.0999999999999996,
                            Role = "staff",
                            Specialties = "",
                            Status = "offline"
                        },
                        new
                        {
                            Id = new Guid("7a3b09bc-9155-499d-b000-f660c1cc4de3"),
                            Email = "sara1@example.com",
                            JobsCompleted = 0,
                            Name = "Sara White",
                            PasswordHash = "$2a$11$Iort/M5GW5345sRwbZ8gr.JEnDM4ROkZQuVTmKap/Ba0enPSYpOwC",
                            Phone = "555-1005",
                            Rating = 4.7999999999999998,
                            Role = "staff",
                            Specialties = "",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("bf35676d-2bad-441b-bf94-186090d72c39"),
                            Email = "mike1@example.com",
                            JobsCompleted = 0,
                            Name = "Mike Wilson",
                            PasswordHash = "$2a$11$hWFWT0/KyCMF88GGoZpiceyKizQZOXwdU0p2Vle4sTGlMY5e1SvXK",
                            Phone = "555-1006",
                            Rating = 4.2999999999999998,
                            Role = "staff",
                            Specialties = "",
                            Status = "busy"
                        },
                        new
                        {
                            Id = new Guid("ca0d83cc-ef5a-4dd9-8a43-b539dde54810"),
                            Email = "emma1@example.com",
                            JobsCompleted = 0,
                            Name = "Emma Davis",
                            PasswordHash = "$2a$11$YFDqf/Yi.UBAc0f73Ac4/uO.UUSjHtB2gtl139GyXfQqHG/xQgaIm",
                            Phone = "555-1007",
                            Rating = 4.5999999999999996,
                            Role = "staff",
                            Specialties = "",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("48107f85-c941-4b78-888c-b70c9d4ce969"),
                            Email = "chris1@example.com",
                            JobsCompleted = 0,
                            Name = "Chris Green",
                            PasswordHash = "$2a$11$Ox43o93NBrl2IKdz6m0OPe5cvYa//FjInij.WIWWt4xr06/5hJpe2",
                            Phone = "555-1008",
                            Rating = 4.0,
                            Role = "staff",
                            Specialties = "",
                            Status = "offline"
                        },
                        new
                        {
                            Id = new Guid("ec6c134a-d548-466a-b0e3-1608eb0a8d4e"),
                            Email = "olivia1@example.com",
                            JobsCompleted = 0,
                            Name = "Olivia Lee",
                            PasswordHash = "$2a$11$yI5R97FXpAf.iiaaQpGRm.jthI1kUfXTBgBWKnnEpVHiEXcVlFVM2",
                            Phone = "555-1009",
                            Rating = 4.9000000000000004,
                            Role = "staff",
                            Specialties = "",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("6a22521b-5efc-4eb5-bd3d-21e84e0f0bd9"),
                            Email = "david1@example.com",
                            JobsCompleted = 0,
                            Name = "David King",
                            PasswordHash = "$2a$11$sHduc.He7vQRaC8GnmADE.nvfRcQXf.F6MV.xFJIq34gp.W4CIHp.",
                            Phone = "555-1010",
                            Rating = 4.2000000000000002,
                            Role = "staff",
                            Specialties = "",
                            Status = "busy"
                        });
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.HasOne("AppUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.HasOne("Staff", "AssignedStaff")
                        .WithMany("Jobs")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedStaff");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Staff", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
